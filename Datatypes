QUESTION 1: LISTS
Consider a list (list = []). You can perform the following commands:
insert i e: Insert integer  at position .
print: Print the list.
remove e: Delete the first occurrence of integer .
append e: Insert integer  at the end of the list.
sort: Sort the list.
pop: Pop the last element from the list.
reverse: Reverse the list.
Initialize your list and read in the value of  followed by  lines of commands where each command will be of the types listed above. Iterate through each command in order and perform the corresponding operation on your list.

Input Format
The first line contains an integer, , denoting the number of commands. 
Each line  of the  subsequent lines contains one of the commands described above.

Constraints
The elements added to the list must be integers.

Output Format
For each command of type print, print the list on a new line.

Sample Input
12
insert 0 5
insert 1 10
insert 0 6
print 
remove 6
append 9
append 1
sort 
print
pop
reverse
print

Sample Output
[6, 5, 10]
[1, 5, 9, 10]
[9, 5, 1]

SOLUTION:
if __name__ == '__main__':
    mylist = []
    N = int(raw_input())
    for i in range(1, N + 1):
        argumentinput = raw_input()
        argument = argumentinput.split()

        if (argument[0] == 'insert'):
            position = int(argument[1])
            element = int(argument[2])
            mylist.insert(position, element)

        if (argument[0] == 'remove'):
            element = int(argument[1])
            mylist.remove(element)
            # print('remove operation')

        if (argument[0] == 'append'):
            element = int(argument[1])
            mylist.append(int(element))
            # print('append operation')

        if (argument[0] == 'print'):
            print mylist

        if (argument[0] == 'sort'):
            mylist.sort()
            # print('sort operation')

        if (argument[0] == 'pop'):
            mylist.pop(-1)
            # print('pop operation')
            # print mylist

        if (argument[0] == 'reverse'):
            mylist.reverse()
            
QUESTION 2: TUPLES
Task 
Given an integer, , and  space-separated integers as input, create a tuple, , of those  integers. Then compute and print the result of .

Note: hash() is one of the functions in the __builtins__ module, so it need not be imported.

Input Format
The first line contains an integer, , denoting the number of elements in the tuple. 
The second line contains  space-separated integers describing the elements in tuple .

Output Format
Print the result of hash(t).
Sample Input
2
1 2
Sample Output
3713081631934410656

SOLUTION:
if __name__ == '__main__':
    n = int(raw_input())
    integer_list = map(int, raw_input().split())
    integer_tuple = tuple(integer_list)
    print hash(integer_tuple)
    
QUESTION 3: LIST COMPREHENSION
  You are given three integers  and  representing the dimensions of a cuboid along with an integer X,Y and Z. You have to print a list of all possible coordinates given by (i,j,k) on a 3D grid where the sum of (x+y+z) is not equal to N.
  SOLUTION:
  if __name__ == '__main__':
    x = int(raw_input())
    y = int(raw_input())
    z = int(raw_input())
    n = int(raw_input())
    print [[i,j,k] for i in range(x+1) for j in range(y+1) for k in range(z+1) if ((i+j+k) != n)]

QUESTION 4: FIND THE SECOND LARGEST NUMBER
You are given N numbers. Store them in a list and find the second largest number.
SOLUTION:
if __name__ == '__main__':
    n = int(raw_input())
    arr = map(int, raw_input().split())
    if n in range(2, 11):
        count = arr.count(max(arr))
        if count > 1:
            for i in range(1,count+1):
                arr.remove(max(arr))
        else:
            arr.remove(max(arr))
        print max(arr)

QUESTION 5: 
  
